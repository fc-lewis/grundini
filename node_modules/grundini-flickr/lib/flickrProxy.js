var http = require('http');
var jsext = require('./extensions.js');

//pro  account
const apiKey = '4fa177458028308c2c9cedd06eba85b2';//pro key
//const userId = '44849659@N05';//errumm
const userId = '56423813@N02';//Grundini

// standard account
//const apiKey = '426522a72fcfa62d0aef65bd7e38ea45';
//const userId = '69611300@N05'; // Peter Grundy

//************************************** public methods

this.getTags = function(handlerCallback) {
  // make flickr call
  var options = {
    host: 'api.flickr.com',
    path: ['/services/rest/?method=flickr.tags.getListUser&api_key=', apiKey, '&user_id=', userId, '&format=json&nojsoncallback=1'].join('')
  }, grundiniResult;

  try {
    flickrGetCall(options, function(flickrResult) {

      var formattedTags = [];
      if(!flickrResult || !flickrResult.result || flickrResult.result !== 'success'){
        handlerCallback({"flickrresponse" : flickrResult});
        return;
      }
      
      if (jsext.checkObjectPathExists(flickrResult, 'flickrResponse.who.tags.tag')) {

        formattedTags = formatTags(flickrResult.flickrResponse.who.tags.tag);
      }
      
      grundiniResult = {"tags" : formattedTags};
      
      debugHandler(grundiniResult);
      
      handlerCallback(grundiniResult);
    });
  }
  catch(e) {
    handlerCallback({
      "message" : "getTags : error occurred while trying to get or format flickr tags.",
      "error" : e
    });
  }

};

this.getClients = function(handlerCallback) { // collections
  var options = {
    host: 'api.flickr.com',
    path: ['/services/rest/?method=flickr.collections.getTree&api_key=', apiKey, '&user_id=', userId, '&per_page=250&format=json&nojsoncallback=1'].join('')
  }, grundiniResult;

  try {
    flickrGetCall(options, function(flickrResult) {
      var formattedClients = [];
      if(!flickrResult || !flickrResult.result || flickrResult.result !== 'success'){
        handlerCallback({"flickrresponse" : flickrResult});
        return;
      }
      
      if (jsext.checkObjectPathExists(flickrResult, 'flickrResponse.collections.collection')) {

        formattedClients = formatClients(flickrResult.flickrResponse.collections.collection);
      }

      grundiniResult = {"clients" : formattedClients};
      
      debugHandler(grundiniResult);
      
      handlerCallback(grundiniResult);
    });
  }
  catch(e) {
    handlerCallback({
      "message" : " getClients :error occurred while trying to get or format flickr collections and sets.",
      "error" : e
    });
  }
};

this.getProjects = function(handlerCallback, args) { // sets - client is optional
  var formattedProjects = [], options, clientQs, grundiniResult;
  
  if (args.clientid) {
    clientQs = '&collection_id=' + args.clientid;
  }

  options = {
    host: 'api.flickr.com',
    path: ['/services/rest/?method=flickr.collections.getTree&per_page=500&api_key=', apiKey,
      '&user_id=', userId, clientQs,'&format=json&nojsoncallback=1'].join('')

  };

  try {
    flickrGetCall(options, function(flickrResult) {
      if(!flickrResult || !flickrResult.result || flickrResult.result !== 'success'){
        
        grundiniResult ={"flickrresponse" : flickrResult};
        
        handlerCallback(grundiniResult);
        return;
      }

      if (jsext.checkObjectPathExists(flickrResult, 'flickrResponse.collections.collection')) {
        formattedProjects = formatProjectsFromTree(flickrResult.flickrResponse.collections.collection);
      }

      grundiniResult = {"projects" : formattedProjects};
      
      debugHandler(grundiniResult);
      
      handlerCallback(grundiniResult);
    });
  }
  catch(e) {
    handlerCallback({
      "message" : "getProjects : error occurred while trying to get or format flickr sets.",
      "error" : e
    });
  }
};

this.getAllProjects = function(handlerCallback){
  var formattedAllProjects = [], options, clientQs, grundiniResult;

  options = {
    host: 'api.flickr.com',
    path: ['/services/rest/?method=flickr.photosets.getList&per_page=500&api_key=', apiKey,
      '&user_id=', userId, clientQs,'&format=json&nojsoncallback=1'].join('')
  };

  try {
    flickrGetCall(options, function(flickrResult) {
      if(!flickrResult || !flickrResult.result || flickrResult.result !== 'success'){

        grundiniResult ={"flickrresponse" : flickrResult};

        handlerCallback(grundiniResult);
        return;
      }

      if (jsext.checkObjectPathExists(flickrResult, 'flickrResponse.photosets.photoset')) {
        formattedAllProjects = formatAllProjects(flickrResult.flickrResponse.photosets.photoset);
      }

      grundiniResult = {"allProjects" : formattedAllProjects};

      debugHandler(grundiniResult);

      handlerCallback(grundiniResult);
    });
  }
  catch(e) {
    handlerCallback({
      "message" : "getProjects : error occurred while trying to get or format flickr sets.",
      "error" : e
    });
  }
};

this.getIllustrations = function(handlerCallback, args) {
  var tagsQs = '', projectIdQs = '', options, formattedIllustrations, grundiniResult;

  //get photos for user
  options = {
    host: 'api.flickr.com',
    path: ['/services/rest/?method=flickr.photos.search&api_key=',
      apiKey, '&user_id=', userId,'&per_page=500&format=json&nojsoncallback=1'].join('')
  };

  if (args.projectflickrid) {
    //GET PHOTOS FOR PROJECT
    projectIdQs = "&photoset_id=" + args.projectflickrid;

    options = {
      host: 'api.flickr.com',
      path: ['/services/rest/?method=flickr.photosets.getPhotos&api_key=',
        apiKey, '&user_id=', userId, projectIdQs, '&per_page=500&extras=original_format,url_o&format=json&nojsoncallback=1'].join('')
    };

  } else if (args.tags) {
    //GET PHOTOS FOR TAGS
    tagsQs = "&tag_mode=all&tags=" + args.tags;

    options = {
      host: 'api.flickr.com',
      path: ['/services/rest/?method=flickr.photos.search&api_key=',
        apiKey, '&user_id=', userId, tagsQs, '&per_page=500&extras=original_format,url_o&format=json&nojsoncallback=1'].join('')
    };
  }

  try {
    flickrGetCall(options, function(flickrResult) {
      if(!flickrResult || !flickrResult.result || flickrResult.result !== 'success'){
        handlerCallback({"flickrresponse" : flickrResult});
        return;
      }
      
      // format illustrations
      if (jsext.checkObjectPathExists(flickrResult, 'flickrResponse.photoset.photo')) {
        formattedIllustrations = formatIllustrations(flickrResult.flickrResponse.photoset.photo);
      }
      if (jsext.checkObjectPathExists(flickrResult, 'flickrResponse.photos.photo')) {
        formattedIllustrations = formatIllustrations(flickrResult.flickrResponse.photos.photo);
      }
      
      grundiniResult = {"illustrations" : formattedIllustrations};
      
      debugHandler(grundiniResult);
      
      handlerCallback(grundiniResult);
    });
  }
  catch(e) {
    handlerCallback({
      "message" : "getIllustrations : error occurred while trying to get or format flickr images.",
      "error" : e
    });
  }
};

this.getIllustration = function(handlerCallback, args) {
  var formattedIllustration = {}, grundiniResult;

  if (!args.illustrationId) {
    throw "Null id : getIllustration : No Id supplied when trying to retrieve illustration."
  }

  var options = {
    host: 'api.flickr.com',
    path: ['/services/rest/?method=flickr.photos.getInfo&api_key=', apiKey, '&photo_id=', args.illustrationId, '&format=json&nojsoncallback=1'].join('')
  };

  try {
    flickrGetCall(options, function(flickrResult) {
      if(!flickrResult || !flickrResult.result || flickrResult.result !== 'success'){
        handlerCallback({"flickrresponse" : flickrResult});
        return;
      }
      
      if (jsext.checkObjectPathExists(flickrResult, 'flickrResponse.photo')) {
        formattedIllustration = formatIllustration(flickrResult.flickrResponse.photo);
      }

      grundiniResult = {"illustration" : formattedIllustration};
      
      debugHandler(grundiniResult);
      
      handlerCallback(grundiniResult);
    });
  }
  catch(e) {
    handlerCallback({
      "message" : "getProjects : error occurred while trying to get or format flickr sets.",
      "error" : e
    });
  }
};

//************************************** private methods
var flickrGetCall = function(options, flickrRespCb) {
  var ts = new Date().getTime();

  http.get(options,
          function(res) {
            var msg = '', msgJson;

            //read response stream
            res.setEncoding('utf8');
            res.on('data', function (chunk) {
              msg += chunk;
            });

            res.on('end', function () {
              msgJson = JSON.parse(msg);
              var successStr = msgJson.stat == 'ok' ? 'success' : 'error';

              flickrRespCb({
                "result"          : successStr,
                "flickrResponse"  : msgJson,
                "timestamp"       : new Date().getTime()
              });
            });


          }).on('error', function(e) {
            flickrRespCb({
              "result"          : "error",
              "error"           : e,
              "timestamp"       : new Date().getTime()
            });

          });

};

var formatTags = function(flickrTags) {
  var formattedTags = [],
          tagObj, tagContentParts;

  for (var i = 0; i < flickrTags.length; i++) {
    tagObj = {
      "slug" : jsext.toSlug(flickrTags[i]._content),
      "value"   : flickrTags[i]._content,
      "content"   : flickrTags[i]._content
    };

    if (tagObj.content.indexOf('|') > 0) {
      tagContentParts = tagObj.content.split('|');

      if (tagContentParts.length == 2) {
        tagObj.group = tagContentParts[0];
        tagObj.value = tagContentParts[1];
      }
    }

    formattedTags.push(tagObj);
  }

  return formattedTags;
};

var formatClients = function(flickrCollections) {
  var formattedClients = [],
          formattedClient;

  for (var i = 0; i < flickrCollections.length; i++) {
    formattedClient = {
      "flickrId"    : flickrCollections[i].id,
      "slug"        : jsext.toSlug(flickrCollections[i].title),
      "title"       : flickrCollections[i].title,
      "description" : flickrCollections[i].description,
      "iconlarge"   : flickrCollections[i].iconlarge,
      "iconsmall"   : flickrCollections[i].iconsmall,
      "projects"    : [],
      "projectCount": flickrCollections[i].set.length,
      "order"       : i+1
    };

    for (var j = 0; j < flickrCollections[i].set.length; j++) {
      formattedClient.projects.push({
        "slug" :  jsext.toSlug(flickrCollections[i].set[j].title),
        "id" : flickrCollections[i].set[j].id,
        "title" : flickrCollections[i].set[j].title,
        "description" : flickrCollections[i].set[j].description
      });
    }

    formattedClients.push(formattedClient);
  }

  return formattedClients;
};

var formatProjectsFromTree = function(flickrCollections) {
  var formattedProjects = [], flickrSets;

  for (var c = 0; c < flickrCollections.length; c++) {
    flickrSets = flickrCollections[c].set;
    for (var i = 0; i < flickrSets.length; i++) {
      formattedProjects.push({
        "flickrId"    : flickrSets[i].id,
        "slug"        : jsext.toSlug(flickrSets[i].title),
        "title"       : flickrSets[i].title,
        "description" : flickrSets[i].description,
        "order"       : i+1
      });
    }
  }


  return formattedProjects;
};

var formatAllProjects = function(flickrSets) {
  var formattedAllProjects = [];


    for (var i = 0; i < flickrSets.length; i++) {
      flickrSets[i].setid = flickrSets[i].id;
      flickrSets[i].id = flickrSets[i].primary;
      
      formattedAllProjects.push({
        "flickrId"                : flickrSets[i].setid,
        "slug"                    : jsext.toSlug(flickrSets[i].title._content),
        "title"                   : flickrSets[i].title._content,
        "description"             : flickrSets[i].description._content,
        "illustrationCount"       : flickrSets[i].photos,
        "primaryId"               : flickrSets[i].primary,
        "imageUrl"                :{
          "square" : getIllustrationUrl(flickrSets[i], 's'),
          "thumbnail" : getIllustrationUrl(flickrSets[i], 't'),
          "small" : getIllustrationUrl(flickrSets[i], 'm'),
          "medium500" : getIllustrationUrl(flickrSets[i], '-'),
          "medium640" : getIllustrationUrl(flickrSets[i], 'z'),
          "large" : getIllustrationUrl(flickrSets[i], 'b'),
          "original" : getIllustrationUrl(flickrSets[i], 'o')
        },
        "order"       : i+1
      });
  }

  return formattedAllProjects;
};

var formatIllustrations = function(flickrPhotos) {
  var ils = [];
  //TODO: REMOVE FLICKR ID FROM THE END OF THE SLUG?
  for (var i = 0; i < flickrPhotos.length; i++) {
    ils.push({
      "flickrId"  : flickrPhotos[i].id,
      "slug"      : jsext.toSlug(flickrPhotos[i].title) + '-' + flickrPhotos[i].id,
      "title"     : flickrPhotos[i].title,
      "isPrimary" : flickrPhotos[i].isprimary,
      "imageurl"      :{
        "square" : getIllustrationUrl(flickrPhotos[i], 's'),
        "thumbnail" : getIllustrationUrl(flickrPhotos[i], 't'),
        "small" : getIllustrationUrl(flickrPhotos[i], 'm'),
        "medium500" : getIllustrationUrl(flickrPhotos[i], '-'),
        "medium640" : getIllustrationUrl(flickrPhotos[i], 'z'),
        "large" : getIllustrationUrl(flickrPhotos[i], 'b'),
        "original" : getIllustrationUrl(flickrPhotos[i], 'o')
      },
      "order"       : i+1
    });
  }

  return ils;
};

var formatIllustration = function(flickrPhoto) {
  var illustration = {};

  illustration.flickrId = flickrPhoto.id;
  illustration.slug = jsext.toSlug(flickrPhoto.title._content);
  illustration.title = flickrPhoto.title._content;
  illustration.description = flickrPhoto.description._content;
  illustration.tag = [];

  if (jsext.checkObjectPathExists(flickrPhoto, 'tags.tag.length')) {
    for (var i = 0; i < flickrPhoto.tags.tag.length; i++) {
      illustration.tag.push({
        "flickrId" : flickrPhoto.tags.tag[i].id,
        "slug" : jsext.toSlug(flickrPhoto.tags.tag[i]._content),
        "value" : flickrPhoto.tags.tag[i]._content,
        "content" : flickrPhoto.tags.tag[i].raw,
        "order"       : i+1
      });
    }
  }

  illustration.imageUrl = {
    "square" : getIllustrationUrl(flickrPhoto, 's'),
    "thumbnail" : getIllustrationUrl(flickrPhoto, 't'),
    "small" : getIllustrationUrl(flickrPhoto, 'm'),
    "medium500" : getIllustrationUrl(flickrPhoto, '-'),
    "medium640" : getIllustrationUrl(flickrPhoto, 'z'),
    "large" : getIllustrationUrl(flickrPhoto, 'b'),
    "original" : getIllustrationUrl(flickrPhoto, 'o')
  };

  return illustration;
};

var getIllustrationUrl = function(photo, size) {
  //TODO: these urls are provided by flickr - maybe use them rather than generating them!?
  var urlPattern = "http://farm{farm-id}.static.flickr.com/{server-id}/{id}_{secret}{_size}.jpg",
          result, sizeStr;

  if (size === 'o') {
    if (photo.originalformat) {
      urlPattern = "http://farm{farm-id}.static.flickr.com/{server-id}/{id}_{o-secret}_o.{format}";

      result = urlPattern.replace('{farm-id}', photo.farm).
              replace('{server-id}', photo.server).
              replace('{id}', photo.id).
              replace('{o-secret}', photo.originalsecret).
              replace('{format}', photo.originalformat);

      return result;
    }

    // No original files - so use the largest flickr makes available - this is a hack for non pro accounts
    size = 'b';
  }

  sizeStr = size == '-' ? '' : '_' + size;

  result = urlPattern.replace('{farm-id}', photo.farm).
          replace('{server-id}', photo.server).
          replace('{id}', photo.id).
          replace('{secret}', photo.secret).
          replace('{_size}', sizeStr);

  return result;
};

var debugHandler = function(result){
  return result;
};
