var urlParser = require('url');
var flickrProxy = require('./lib/flickrProxy');
var jsext = require('./lib/extensions.js');
var mappings = {};

//************************************** public methods
this.parseRequest = function(url) {
  var pathname = url.pathname,
          parsedRequest = {
            "args" : {},
            "route" : pathname.split('/')
          },
          actionParts = parsedRequest.route[parsedRequest.route.length - 1].split('.');

  //query
  if (url.query) {
    parsedRequest.args = url.query;
  }

  //path
  if (actionParts.length === 2) {
    parsedRequest.method = actionParts[0];
    parsedRequest.format = actionParts[1];
  }
  else {
    // todo:
    throw 'Not supported. ParseUrl: more than one part to path.';
  }

  return parsedRequest;
};

this.executeRequest = function(apiRequest, ctx, handlerCallBack) {

  if (mappings[apiRequest.method] && typeof mappings[apiRequest.method] === 'function') {
    mappings[apiRequest.method](handlerCallBack, apiRequest.args);
    return;
  }

  var ex = new Error("executeRequest failed.");
  ex.args = [apiRequest, ctx];

  if (!apiRequest.method) {
    ex.description = "No Method specified to execute";
    throw ex;
  }

  if (!mappings[apiRequest.method]) {
    ex.description = ["could not find method ", apiRequest.method, " in context."].join('');
    throw ex;
  }

  ex.description = "unknown error";
  throw ex;
};

// examples:
// api.grundini.com/flickr/getTags.json
// api.grundini.com/flickr/getClients.json
// api.grundini.com/flickr/getProjects.json?client=clientName
// api.grundini.com/flickr/getIllustrations.json?tag=usage|editorial
// api.grundini.com/flickr/getIllustrations.json?projectflickrid=usage|editorial

this.handleRequest = function(url, responseCallback) {

  var parsedReq, result = {
    "result"    : "success",
    "data"      : {},
    "timestamp" : new Date().getTime()
  };

  try{
    //parse url
    parsedReq = this.parseRequest(urlParser.parse(url, true));
    result.request = parsedReq;

    //execute
    this.executeRequest(parsedReq, flickrProxy, function(data){
      result.data = data;

      responseCallback(result);
    });
  }
  catch(ex){
    result.result = "error";
    result.error = ex;
    responseCallback(result);
  }
};

//************************************** private methods
var mapRequests = function(ctx){
  mappings = {
    "clients"           : ctx.getClients,
    "illustration"      : ctx.getIllustration,
    "illustrations"     : ctx.getIllustrations,
    "tags"              : ctx.getTags,
    "projects"          : ctx.getProjects,
    "userprojects"      : ctx.getAllProjects
  };
};

//************************************** initialisation
mapRequests(flickrProxy);
